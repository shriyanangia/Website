"use client"
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { Suspense,useEffect, useRef } from 'react'
import { OrbitControls, useAnimations, useFBX, useGLTF, Preload } from '@react-three/drei'
import { useFrame } from '@react-three/fiber';
import { Canvas } from "@react-three/fiber";
import CanvasLoader from "../Loader";
import * as THREE from "three"

const Avatar = (props) => {
    // const {animation} = props;
    // const { headFollow, cursorFollow, wireframe } = useControls({
    //     headFollow: false,
    //     cursorFollow: false,
    //     wireframe: false,
    //   });
    const group = useRef();
    const { nodes, materials } = useGLTF('models/678597c3de70b99d94453ace.glb')

    const {animations:wavingAnimation} = useFBX("animations/Standing Greeting.fbx");
    const {animations:standingAnimation} = useFBX("animations/Standing Idle.fbx");

    wavingAnimation[0].name = "Hello";
    standingAnimation[0].name = "Standing";

    const {actions} = useAnimations([wavingAnimation[0],standingAnimation[0]], group)

    useFrame((state) => {
      const target = new THREE.Vector3(state.mouse.x, state.mouse.y, 1);
      const head = group.current.getObjectByName("Head");
      if (head) {
          head.lookAt(target);
      }
  }, []);

  useEffect(() => {
    if (actions) {
        actions['Hello'].reset().fadeIn(0.5).play();
        const timeout = setTimeout(() => {
            actions['Hello'].fadeOut(0.5);
            actions['Standing'].reset().fadeIn(0.5).play();
        }, wavingAnimation[0].duration * 1000);

        return () => {
          clearTimeout(timeout);
          if (actions['Hello']) actions['Hello'].stop();
          if (actions['Standing']) actions['Standing'].stop();
      };
    }
}, [actions, wavingAnimation]);
    
    //   useEffect(() => {
    //     Object.values(materials).forEach((material) => {
    //       material.wireframe = wireframe;
    //     });
    //   }, [wireframe]);

  return (
    <group {...props} ref={group} dispose={null}>
        <group rotation-x={-Math.PI / 2}>
      <primitive object={nodes.Hips} scale={2}/>
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      </group>
    </group>
  )
}
useGLTF.preload('models/678597c3de70b99d94453ace.glb')

const AvatarCanvas = ({ icon }) => {
  return (
    <Canvas
    shadows camera={{ position: [0, 2, 5], fov: 30 }}
    >
      <Suspense 
      // fallback={<CanvasLoader />}
      >
        <OrbitControls enableZoom={false} />
        <group position-y={-1}>
        <Avatar />
      </group>
      <ambientLight intensity={3}/>
      </Suspense>

      <Preload all />
    </Canvas>
  );
};

export default AvatarCanvas;


// rembrandt

// city
// Made by @NikkitaFTW & contributors inspired by the gltfjsx cli

